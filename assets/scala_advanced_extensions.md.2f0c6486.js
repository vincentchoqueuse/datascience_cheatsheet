import{_ as s,o as n,c as a,a as l}from"./app.f1a68c47.js";const F=JSON.parse('{"title":"Extensions and Operators","description":"","frontmatter":{},"headers":[{"level":2,"title":"Extensions","slug":"extensions","link":"#extensions","children":[]},{"level":2,"title":"Operators","slug":"operators","link":"#operators","children":[{"level":3,"title":"Infix notation","slug":"infix-notation","link":"#infix-notation","children":[]},{"level":3,"title":"Unary operators","slug":"unary-operators","link":"#unary-operators","children":[]}]},{"level":2,"title":"Example with a pipe operator","slug":"example-with-a-pipe-operator","link":"#example-with-a-pipe-operator","children":[]}],"relativePath":"scala/advanced/extensions.md"}'),o={name:"scala/advanced/extensions.md"},p=l(`<h1 id="extensions-and-operators" tabindex="-1">Extensions and Operators <a class="header-anchor" href="#extensions-and-operators" aria-hidden="true">#</a></h1><h2 id="extensions" tabindex="-1">Extensions <a class="header-anchor" href="#extensions" aria-hidden="true">#</a></h2><p>Scala uses the keyword <code>extension</code> to achieve method enrichment for any type.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">extension</span><span style="color:#A6ACCD;"> (</span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">twice</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> i</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">j</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> j</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">println(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">.twice)        </span><span style="color:#676E95;font-style:italic;">// prints 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x.add(</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">println(y)              </span><span style="color:#676E95;font-style:italic;">// prints 7</span></span>
<span class="line"></span></code></pre></div><p>Extensions can also be parameterized by type, and/or take contextual parameters:</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">trait</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PrettyPrinter</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">prettyprint</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PrettyPrinters</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">given</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PrettyPrinter</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">with</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">prettyprint</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Int: </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">given</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PrettyPrinter</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">with</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">prettyprint</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">String: </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">given</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PrettyPrinter</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">Boolean</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">with</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">prettyprint</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Boolean</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Boolean: </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">extension</span><span style="color:#A6ACCD;"> [</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">](</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">)(</span><span style="color:#89DDFF;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">pp</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">PrettyPrinter</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">prettyprint</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> println(pp.prettyprint(x))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PrettyPrinters</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">given</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">.prettyprint           </span><span style="color:#676E95;font-style:italic;">// Int: 1</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">.prettyprint     </span><span style="color:#676E95;font-style:italic;">// String: hello</span></span>
<span class="line"><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;">.prettyprint        </span><span style="color:#676E95;font-style:italic;">// Boolean: true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;a&#39;.prettyprint      // doesn&#39;t compile</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ^^^^^^^^^^^^^^^ No instance of PrettyPrinter was found for type Char</span></span>
<span class="line"></span></code></pre></div><p>This allows the extension to be used on any instance for which there is a <code>given</code> instance of <code>PrettyPrinter</code> of the instance&#39;s type.</p><h2 id="operators" tabindex="-1">Operators <a class="header-anchor" href="#operators" aria-hidden="true">#</a></h2><p>Scala is very flexible when it comes to names. It is very easy to create its own operators through normal methods: just give the method the name of your operator.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Vec</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Double</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Double</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">norm</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Double</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sqrt(x</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">y)                          </span><span style="color:#676E95;font-style:italic;">// normal method</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">+</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">that</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Vec</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Vec</span><span style="color:#A6ACCD;">(this.x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> that.x, this.y </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> that.y)    </span><span style="color:#676E95;font-style:italic;">// + operator</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">&lt;|&gt;</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">that</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Vec</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> this.x </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> that.x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> this.y </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> that.y      </span><span style="color:#676E95;font-style:italic;">// custom operator</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> v1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Vec</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> v2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Vec</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">v1.norm             </span><span style="color:#676E95;font-style:italic;">// calling the &quot;norm&quot; method</span></span>
<span class="line"><span style="color:#A6ACCD;">v1.</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">(v2)            </span><span style="color:#676E95;font-style:italic;">// calling the &quot;+&quot; method</span></span>
<span class="line"><span style="color:#A6ACCD;">v1.</span><span style="color:#89DDFF;">&lt;|&gt;</span><span style="color:#A6ACCD;">(v2)          </span><span style="color:#676E95;font-style:italic;">// calling the &quot;&lt;|&gt;&quot; method</span></span>
<span class="line"></span></code></pre></div><h3 id="infix-notation" tabindex="-1">Infix notation <a class="header-anchor" href="#infix-notation" aria-hidden="true">#</a></h3><p>Using the dot notation (<code>object.method</code>) makes sense for normal methods (like <code>norm</code> is the previous example) but does not look very good for operators (<code>+</code> and <code>&lt;|&gt;</code> in the previous example). Instead we can use <strong>infix notation</strong>:</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">v1 </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> v2             </span><span style="color:#676E95;font-style:italic;">// equivalent to v1.+(v2)</span></span>
<span class="line"><span style="color:#A6ACCD;">v1 </span><span style="color:#89DDFF;">&lt;|&gt;</span><span style="color:#A6ACCD;"> v2           </span><span style="color:#676E95;font-style:italic;">// equivalent to v1.&lt;|&gt;(v2)</span></span>
<span class="line"></span></code></pre></div><h3 id="unary-operators" tabindex="-1">Unary operators <a class="header-anchor" href="#unary-operators" aria-hidden="true">#</a></h3><p>If you want a 0 parameter operator to be used as a prefix to the instances it is called on, you can use <strong>unary operators</strong>. Simple prefix the method name with &quot;unary_&quot; (work with <code>+</code>, <code>-</code>, <code>!</code>, and <code>~</code>):</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Vec</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Double</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Double</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">unary_~</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Vec</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">x, </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">y)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> v1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Vec</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;">v1         </span><span style="color:#676E95;font-style:italic;">// equivalent to v1.~</span></span>
<span class="line"></span></code></pre></div><h2 id="example-with-a-pipe-operator" tabindex="-1">Example with a pipe operator <a class="header-anchor" href="#example-with-a-pipe-operator" aria-hidden="true">#</a></h2><p>By combining extensions and operators, we can make for pretty nice custom sintactic sugars. Here is an example with a pipe operator.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">addOne</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mulThree</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">subTwo</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Normal chaining to achieve y = ((x + 1) * 3) - 2</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> subTwo(mulThree(addOne(x)))</span></span>
<span class="line"></span></code></pre></div><p>This notation is cumbersome and boring. Here is a much nicer solution:</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">extension</span><span style="color:#A6ACCD;"> [</span><span style="color:#FFCB6B;">Y</span><span style="color:#A6ACCD;">](</span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Y</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">|&gt;</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">Z</span><span style="color:#A6ACCD;">](</span><span style="color:#A6ACCD;font-style:italic;">f</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Y</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Z</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Z</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> f(y)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">|&gt;</span><span style="color:#A6ACCD;"> addOne</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">|&gt;</span><span style="color:#A6ACCD;"> mulThree</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">|&gt;</span><span style="color:#A6ACCD;"> subTwo</span></span>
<span class="line"></span></code></pre></div><p>The result of each function is piped as the input of the next function.</p>`,22),e=[p];function t(c,r,y,C,A,D){return n(),a("div",null,e)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
