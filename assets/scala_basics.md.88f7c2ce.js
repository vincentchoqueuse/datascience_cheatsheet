import{_ as s,o as a,c as n,a as l}from"./app.b29be83a.js";const d=JSON.parse('{"title":"Basics","description":"","frontmatter":{},"headers":[{"level":2,"title":"Printing","slug":"printing","link":"#printing","children":[]},{"level":2,"title":"Built-In Types","slug":"built-in-types","link":"#built-in-types","children":[]},{"level":2,"title":"Values","slug":"values","link":"#values","children":[]},{"level":2,"title":"Blocks","slug":"blocks","link":"#blocks","children":[]},{"level":2,"title":"Functions","slug":"functions","link":"#functions","children":[{"level":3,"title":"Function types","slug":"function-types","link":"#function-types","children":[]}]},{"level":2,"title":"Methods","slug":"methods","link":"#methods","children":[]},{"level":2,"title":"Control flow","slug":"control-flow","link":"#control-flow","children":[{"level":3,"title":"Conditions","slug":"conditions","link":"#conditions","children":[]},{"level":3,"title":"Loops","slug":"loops","link":"#loops","children":[]},{"level":3,"title":"Pattern matching","slug":"pattern-matching","link":"#pattern-matching","children":[]}]}],"relativePath":"scala/basics.md"}'),o={name:"scala/basics.md"},e=l(`<h1 id="basics" tabindex="-1">Basics <a class="header-anchor" href="#basics" aria-hidden="true">#</a></h1><h2 id="printing" tabindex="-1">Printing <a class="header-anchor" href="#printing" aria-hidden="true">#</a></h2><p>You can output the result of an expression using <code>println</code></p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">println(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">println(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">println(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="built-in-types" tabindex="-1">Built-In Types <a class="header-anchor" href="#built-in-types" aria-hidden="true">#</a></h2><p>Scala has a lot of the same built in type as other languages: <code>Double</code>, <code>Float</code>, <code>Long</code>, <code>Int</code>, <code>Short</code>, <code>Byte</code>, <code>Char</code>, <code>Boolean</code> and <code>Unit</code> (equivalent to <code>void</code>)</p><p>Conversions between these types are available using the build-ins methods <code>.to&lt;Type&gt;</code> such as: <code>.toInt</code>, <code>.toString</code>, <code>.toFloat</code>...</p><h2 id="values" tabindex="-1">Values <a class="header-anchor" href="#values" aria-hidden="true">#</a></h2><p>Scala uses the keyword <code>val</code> to define an <strong>immutable</strong> value and <code>var</code> to define an <strong>mutable</strong> variable</p><p><em>NB: types can be inferred</em></p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">//immutable</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My type is inferred</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">//mutable</span></span>
<span class="line"></span></code></pre></div><h2 id="blocks" tabindex="-1">Blocks <a class="header-anchor" href="#blocks" aria-hidden="true">#</a></h2><p>Scala uses <code>{}</code> to define a block. Expressions can be chained/combined into a block. The result of the last expression is the result (hence the type) of the entire block.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> num1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">13</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> twice </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> number.toInt</span></span>
<span class="line"><span style="color:#A6ACCD;">    x </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//: Int = 26</span></span>
<span class="line"></span></code></pre></div><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-hidden="true">#</a></h2><p>In Scala <strong>functions are first class citizens</strong>, which means that they behave like every other objects. Functions can then be anonymous, named, composed and can take parameters:</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">                       </span><span style="color:#676E95;font-style:italic;">// anonymous</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> meaningOfLife </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> () </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">42</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// 0 parameter</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> addOne </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">// 1 parameter </span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> add </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">, </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> y     </span><span style="color:#676E95;font-style:italic;">// 2 parameters</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> subOne </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> add(x, </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)     </span><span style="color:#676E95;font-style:italic;">// composition</span></span>
<span class="line"></span></code></pre></div><h3 id="function-types" tabindex="-1">Function types <a class="header-anchor" href="#function-types" aria-hidden="true">#</a></h3><p><strong>Q:</strong> If functions are defined like any other value using the keyword <code>val</code>, what is their type ?</p><p><strong>A:</strong> Functions have their own type looking like <code>? =&gt; ?</code></p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">                       </span><span style="color:#676E95;font-style:italic;">// has type Int</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> addOne </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// has type Int =&gt; Int</span></span>
<span class="line"></span></code></pre></div><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h2><p>Scala uses the keyword <code>def</code> to define a method. Methods have a name, zero or more parameters, a return type and a body:</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">meaningOfLife</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">42</span><span style="color:#A6ACCD;">                     </span><span style="color:#676E95;font-style:italic;">// 0 parameter</span></span>
<span class="line"><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">addOne</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">                      </span><span style="color:#676E95;font-style:italic;">// 1 parameter, type is inferred</span></span>
<span class="line"><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">, </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> y                 </span><span style="color:#676E95;font-style:italic;">// 2 parameters</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">addPrint</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">, </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">)(</span><span style="color:#A6ACCD;font-style:italic;">units</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// 3 parameters in 2 param. lists</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> y                             </span><span style="color:#676E95;font-style:italic;">// body is evaluated as a block</span></span>
<span class="line"><span style="color:#A6ACCD;">    println(res.toString </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> units)               </span><span style="color:#676E95;font-style:italic;">// using indentation instead of {}</span></span>
<span class="line"><span style="color:#A6ACCD;">    res</span></span>
<span class="line"></span></code></pre></div><h2 id="control-flow" tabindex="-1">Control flow <a class="header-anchor" href="#control-flow" aria-hidden="true">#</a></h2><h3 id="conditions" tabindex="-1">Conditions <a class="header-anchor" href="#conditions" aria-hidden="true">#</a></h3><p>Scala uses the keywords <code>if</code>, <code>then</code>, <code>else</code> to do branching on condition:</p><p><em>NB: just like for method bodies, <code>{}</code> are optionnal</em></p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">    println(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">You are underage</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">    println(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">You are not underage</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="loops" tabindex="-1">Loops <a class="header-anchor" href="#loops" aria-hidden="true">#</a></h3><h4 id="for-loops" tabindex="-1"><code>for</code> loops <a class="header-anchor" href="#for-loops" aria-hidden="true">#</a></h4><p>Scala uses the keywords <code>for</code> and <code>do</code> to iterate over the elements in a collection:</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> until </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;"> println(i)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"></span></code></pre></div><h4 id="while-loops" tabindex="-1"><code>while</code> loops <a class="header-anchor" href="#while-loops" aria-hidden="true">#</a></h4><p>Scala uses the keywords <code>while</code> and <code>do</code> as follows:</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> sum </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">do</span></span>
<span class="line"><span style="color:#A6ACCD;">    sum </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> i</span></span>
<span class="line"><span style="color:#A6ACCD;">    i </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span></code></pre></div><h3 id="pattern-matching" tabindex="-1">Pattern matching <a class="header-anchor" href="#pattern-matching" aria-hidden="true">#</a></h3><p>Scala uses the keyword <code>match</code> and <code>case</code> to do pattern matching:</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;font-style:italic;">match</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Bob</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> println(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hi, Bob</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Alice</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> println(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hi, Alice</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div>`,39),p=[e];function t(c,r,i,y,C,D){return a(),n("div",null,p)}const F=s(o,[["render",t]]);export{d as __pageData,F as default};
