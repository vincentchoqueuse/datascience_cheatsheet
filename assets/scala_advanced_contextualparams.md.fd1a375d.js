import{_ as s,o as n,c as a,a as l}from"./app.f1a68c47.js";const F=JSON.parse('{"title":"Contextual parameters","description":"","frontmatter":{},"headers":[{"level":2,"title":"Implicit conversion","slug":"implicit-conversion","link":"#implicit-conversion","children":[]},{"level":2,"title":"Parameterizing given instances","slug":"parameterizing-given-instances","link":"#parameterizing-given-instances","children":[]}],"relativePath":"scala/advanced/contextualparams.md"}'),o={name:"scala/advanced/contextualparams.md"},p=l(`<h1 id="contextual-parameters" tabindex="-1">Contextual parameters <a class="header-anchor" href="#contextual-parameters" aria-hidden="true">#</a></h1><p>A method can have contextual parameters, also called implicit parameters, or more concisely implicits. These parameters can be ommited when calling the method as the compiler will look for available implicit (<code>given</code>) values in the scope of the call.</p><p>Scala uses the keywords <code>given</code> and <code>using</code> to achieve contextual parameters.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">addSuffix</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">)(</span><span style="color:#89DDFF;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">suffix</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> suffix</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">given</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mySuffix</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.scala</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">println(addSuffix(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">))          </span><span style="color:#676E95;font-style:italic;">// prints &quot;main.scala&quot;</span></span>
<span class="line"></span></code></pre></div><p>A few notes on <code>given</code> value :</p><ul><li>they can be anonymous</li><li>they can extend classes and interfaces (<code>abstract class</code>, <code>trait</code>) if they implement all their members.</li><li>if there are multiple <code>given</code> candidates, the compiler picks the closest to the call</li><li>contextual parameters are resolved at compile time (you cannot create instances of <code>given</code> value at runtime)</li></ul><p>A more elaborated example where contextual parameters allow for a form of method overloading by type.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">trait</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PrettyPrinter</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">prettyprint</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PrettyPrinters</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">given</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PrettyPrinter</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">with</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">prettyprint</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Int: </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">given</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PrettyPrinter</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">with</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">prettyprint</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">String: </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">given</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PrettyPrinter</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">Boolean</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">with</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">prettyprint</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Boolean</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Boolean: </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">display</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">](</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">)(</span><span style="color:#89DDFF;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">pp</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">PrettyPrinter</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Unit</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">    println(pp.prettyprint(x))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PrettyPrinters</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">given</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">display(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)              </span><span style="color:#676E95;font-style:italic;">// prints: Int: 2</span></span>
<span class="line"><span style="color:#A6ACCD;">display(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)        </span><span style="color:#676E95;font-style:italic;">// prints: String: hello</span></span>
<span class="line"><span style="color:#A6ACCD;">display(</span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;">)           </span><span style="color:#676E95;font-style:italic;">// prints: Boolean: true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// display(3.14)        // doesn&#39;t compile</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ^^^^^^^^^^^^ No given instance of PrettyPrinter[Double] was found</span></span>
<span class="line"></span></code></pre></div><h2 id="implicit-conversion" tabindex="-1">Implicit conversion <a class="header-anchor" href="#implicit-conversion" aria-hidden="true">#</a></h2><p>You can implement you own implicit conversions using <code>given</code> instances of the <code>Conversion</code> abstract class.</p><p><em>General Scala knowlegdge: signature of the <code>Conversion</code> class (great use of variance)</em></p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">abstract</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Conversion</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">+</span><span style="color:#FFCB6B;">U</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">U</span></span>
<span class="line"></span></code></pre></div><p><em>NB: types can (obviously) not be inferred when using implicit conversions</em></p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">given</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Conversion</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">with</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">apply</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;">(x)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> Alice</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Alice</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">// Person(&quot;Alice&quot;)</span></span>
<span class="line"></span></code></pre></div><h2 id="parameterizing-given-instances" tabindex="-1">Parameterizing <code>given</code> instances <a class="header-anchor" href="#parameterizing-given-instances" aria-hidden="true">#</a></h2><p>Just list methods and classes, <code>given</code> instances can be parameterized by type and, to a certain extent, by value.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">given</span><span style="color:#A6ACCD;"> [</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;">](</span><span style="color:#89DDFF;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">conv</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Conversion</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Conversion</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">], </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;">]] </span><span style="color:#89DDFF;">with</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">apply</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x.map(e </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> conv.apply(e))</span></span>
<span class="line"></span></code></pre></div><p>This example allows to compiler to convert a <code>List[A]</code> to a <code>List[B]</code> provided that it knows (i.d. has a <code>given</code> instance of <code>Conversion[A, B]</code> in scope) how to convert an <code>A</code> to a <code>B</code>.</p><p>Combined with the previous example:</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">given</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Conversion</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">with</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">apply</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;">(x)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">given</span><span style="color:#A6ACCD;"> [</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;">](</span><span style="color:#89DDFF;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">conv</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Conversion</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Conversion</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">], </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;">]] </span><span style="color:#89DDFF;">with</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">apply</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x.map(e </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> conv.apply(e))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> names </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Bob</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Alice</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">James</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)       </span><span style="color:#676E95;font-style:italic;">// a List of String</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> persons</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> names               </span><span style="color:#676E95;font-style:italic;">// a List of Person created from a List of String</span></span>
<span class="line"></span></code></pre></div><p><strong>Q:</strong> What happens under the hood ?</p><p><strong>A:</strong> The compiler unrolls the parameterized givens instanciates all the possible combinations.</p><p>To go further read this <a href="https://stackoverflow.com/questions/76138390/why-cant-the-compiler-chain-conversions?noredirect=1#comment134283709_76138390" target="_blank" rel="noreferrer">question</a></p>`,23),e=[p];function t(c,r,C,y,A,D){return n(),a("div",null,e)}const B=s(o,[["render",t]]);export{F as __pageData,B as default};
