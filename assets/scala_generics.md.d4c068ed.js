import{_ as s,o as a,c as n,a as o}from"./app.0972b3d3.js";const d=JSON.parse('{"title":"Generics","description":"","frontmatter":{},"headers":[{"level":2,"title":"Polymorphic methods","slug":"polymorphic-methods","link":"#polymorphic-methods","children":[]},{"level":2,"title":"Generic classes","slug":"generic-classes","link":"#generic-classes","children":[]},{"level":2,"title":"Variances","slug":"variances","link":"#variances","children":[]}],"relativePath":"scala/generics.md"}'),e={name:"scala/generics.md"},l=o(`<h1 id="generics" tabindex="-1">Generics <a class="header-anchor" href="#generics" aria-hidden="true">#</a></h1><p>Scala&#39;s type system allows methods and classes to be very flexible with types.</p><h2 id="polymorphic-methods" tabindex="-1">Polymorphic methods <a class="header-anchor" href="#polymorphic-methods" aria-hidden="true">#</a></h2><p>Scala uses the syntax <code>[]</code> to parameterize methods by type.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doNothing</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">](</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x</span></span>
<span class="line"></span></code></pre></div><p>This methods can be read like: &quot;a function <code>doNothing</code> that takes a type parameter <code>A</code>, a value parameter <code>x</code> of type <code>A</code> and returns a value of type <code>A</code>&quot;. This method can then be used with any object that fits the type parameter (here any type would fit):</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">doNothing[</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">](</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)               </span><span style="color:#676E95;font-style:italic;">// works with Int</span></span>
<span class="line"><span style="color:#A6ACCD;">doNothing[</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">](</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)      </span><span style="color:#676E95;font-style:italic;">// works with String</span></span>
<span class="line"><span style="color:#A6ACCD;">doNothing(</span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;">)                 </span><span style="color:#676E95;font-style:italic;">// works with Boolean, type parameter is deduced automatically</span></span>
<span class="line"></span></code></pre></div><h2 id="generic-classes" tabindex="-1">Generic classes <a class="header-anchor" href="#generic-classes" aria-hidden="true">#</a></h2><p>Scala uses the syntax <code>[]</code> to parameterize classes by type.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Box</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">](</span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">peek</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> content</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">place</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Unit</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x</span></span>
<span class="line"></span></code></pre></div><p>The class <code>Box</code> is now parameterized by type (<code>A</code>) as well as by value (<code>content</code>). The methods <code>peek</code> and <code>place</code> can then use <code>A</code> for their parameter or return type.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> stringBox </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Box</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">](</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Bob</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)      </span><span style="color:#676E95;font-style:italic;">// a Box of String</span></span>
<span class="line"><span style="color:#A6ACCD;">println(stringBox.peek)                 </span><span style="color:#676E95;font-style:italic;">// prints &quot;Bob&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">stringBox.place(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Alice</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)                </span><span style="color:#676E95;font-style:italic;">// stringBox now contains &quot;Alice&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> intBox </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Box</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">](</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)                </span><span style="color:#676E95;font-style:italic;">// a Box of Int</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> boolBox </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Box</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">false</span><span style="color:#A6ACCD;">)                </span><span style="color:#676E95;font-style:italic;">// a Box of Boolean, type is deduced</span></span>
<span class="line"></span></code></pre></div><h2 id="variances" tabindex="-1">Variances <a class="header-anchor" href="#variances" aria-hidden="true">#</a></h2><p>Variance lets you control how type parameters behave with regards to subtyping. Scala supports variance annotations of type parameters of generic classes, to allow them to be covariant, contravariant, or invariant if no annotations are used. The use of variance in the type system allows us to make intuitive connections between complex types.</p><p>Scala uses notation <code>+</code> and <code>-</code> to achieve variance in generic classes.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foo</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">]        </span><span style="color:#676E95;font-style:italic;">// Invariant class</span></span>
<span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bar</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">+</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">]       </span><span style="color:#676E95;font-style:italic;">// Covariant class</span></span>
<span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Baz</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">]       </span><span style="color:#676E95;font-style:italic;">// Contravariant class</span></span>
<span class="line"></span></code></pre></div><p>If you don&#39;t know what invariance, covariance and contravariance are, you can refer to <a href="https://docs.scala-lang.org/tour/variances.html" target="_blank" rel="noreferrer">Scala&#39;s book</a>.</p>`,17),p=[l];function t(c,r,i,y,C,A){return a(),n("div",null,p)}const F=s(e,[["render",t]]);export{d as __pageData,F as default};
