import{_ as s,o as a,c as n,a as l}from"./app.b29be83a.js";const F=JSON.parse('{"title":"Object Oriented Programming","description":"","frontmatter":{},"headers":[{"level":2,"title":"Classes","slug":"classes","link":"#classes","children":[]},{"level":2,"title":"Objects","slug":"objects","link":"#objects","children":[]},{"level":2,"title":"Abstract classes","slug":"abstract-classes","link":"#abstract-classes","children":[{"level":3,"title":"Implementing abstract classes","slug":"implementing-abstract-classes","link":"#implementing-abstract-classes","children":[]}]},{"level":2,"title":"Traits","slug":"traits","link":"#traits","children":[{"level":3,"title":"Implementing traits","slug":"implementing-traits","link":"#implementing-traits","children":[]}]}],"relativePath":"scala/oop.md"}'),o={name:"scala/oop.md"},e=l(`<h1 id="object-oriented-programming" tabindex="-1">Object Oriented Programming <a class="header-anchor" href="#object-oriented-programming" aria-hidden="true">#</a></h1><p>Ojected oriented programming (OOP) in Scala is achieved using four main keywords <code>class</code>, <code>object</code>, <code>abstract</code> and <code>trait</code>.</p><h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-hidden="true">#</a></h2><p>Scala uses the keyword <code>class</code> to define the blueprint for creating an object:</p><p><em>NB: keyword <code>new</code> is optionnal</em></p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Dog</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> max </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Dog</span></span>
<span class="line"></span></code></pre></div><p>A constructor for the class can be created by adding parameters to the class definition. You can turn any parameter into a class member by prepending it with one of the keywords <code>val</code> or <code>var</code> (immutable/mutable)</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Dog</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">, </span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> max </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Dog</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Max the dog</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">println(max.name)       </span><span style="color:#676E95;font-style:italic;">// &quot;Max the dog&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// println(max.age)     // does not compile</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         ^^^^^^^ age is not a class member of Dog</span></span>
<span class="line"></span></code></pre></div><p>Methods and other class members can be defined inside the class definition. The <code>protected</code> and <code>private</code> access modifiers can be used to change visibility (public by default).</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Dog</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">, </span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> noise </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">woof</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">barkAt</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> println(</span><span style="color:#89DDFF;">s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">name</span><span style="color:#C3E88D;"> says </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">noise</span><span style="color:#C3E88D;"> to </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)   </span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> max </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Dog</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Max the dog</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)  </span></span>
<span class="line"><span style="color:#A6ACCD;">max.barkAt(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Bob</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)       </span><span style="color:#676E95;font-style:italic;">// Max the dog says woof to Bob</span></span>
<span class="line"></span></code></pre></div><h2 id="objects" tabindex="-1">Objects <a class="header-anchor" href="#objects" aria-hidden="true">#</a></h2><p>Scala used the keyword <code>object</code> to define singleton object (i.d. a value of a unique class)</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DogHouse</span></span>
<span class="line"></span></code></pre></div><p>Just like classes, objects can have members and methods but they have no contructor (by definition)</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DogHouse</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> dog </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Dog</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Max</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)  </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">knock</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">visitor</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        println(</span><span style="color:#89DDFF;">s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">visitor</span><span style="color:#C3E88D;"> knocks on the door of </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">dog.name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&#39;s house</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">DogHouse</span><span style="color:#A6ACCD;">.knock(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Alice</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)     </span><span style="color:#676E95;font-style:italic;">//Alice knocks on the door of Max&#39;s house</span></span>
<span class="line"></span></code></pre></div><h2 id="abstract-classes" tabindex="-1">Abstract classes <a class="header-anchor" href="#abstract-classes" aria-hidden="true">#</a></h2><p>Scala uses the keyword <code>abstract</code> to define interfaces.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">abstract</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Animal</span></span>
<span class="line"></span></code></pre></div><p>A <code>trait</code> can have members and methods declarations:</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">abstract</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Animal</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> food</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">eat</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Unit</span></span>
<span class="line"></span></code></pre></div><h3 id="implementing-abstract-classes" tabindex="-1">Implementing abstract classes <a class="header-anchor" href="#implementing-abstract-classes" aria-hidden="true">#</a></h3><p>Scala uses the keyword <code>extends</code> to extend (inherit/implement) an <code>abstract class</code> and the keyword <code>override</code> to implement members and methods.</p><p><em>NB: a class can only extend one abtract class.</em></p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lion</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Animal</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> food</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">meat</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">eat</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Unit</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> println(</span><span style="color:#89DDFF;">s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The lion is eating </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">food</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="traits" tabindex="-1">Traits <a class="header-anchor" href="#traits" aria-hidden="true">#</a></h2><p>Scala can also uses the keyword <code>trait</code> to define interfaces.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">trait</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Terrestrial</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">walk</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Unit</span></span>
<span class="line"></span></code></pre></div><h3 id="implementing-traits" tabindex="-1">Implementing traits <a class="header-anchor" href="#implementing-traits" aria-hidden="true">#</a></h3><p>Scala uses the keyword <code>extends</code> or <code>with</code> to extend (inherit/implement) a <code>trait</code> and the keyword <code>override</code> to implement members and methods.</p><p><em>NB: a class can extend multiple traits.</em></p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lion</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Animal</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Terrestrial</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> food</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">meat</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">eat</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Unit</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> println(</span><span style="color:#89DDFF;">s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The lion is eating </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">food</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">walk</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Unit</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> println(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The lion is walking</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div>`,31),p=[e];function t(c,r,i,D,y,C){return a(),n("div",null,p)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
