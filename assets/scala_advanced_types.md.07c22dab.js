import{_ as s,o as a,c as n,a as l}from"./app.f1a68c47.js";const F=JSON.parse('{"title":"Types","description":"","frontmatter":{},"headers":[{"level":2,"title":"Type alias","slug":"type-alias","link":"#type-alias","children":[{"level":3,"title":"Function type aliases","slug":"function-type-aliases","link":"#function-type-aliases","children":[]}]},{"level":2,"title":"Upper type bounds","slug":"upper-type-bounds","link":"#upper-type-bounds","children":[]},{"level":2,"title":"Lower type bounds","slug":"lower-type-bounds","link":"#lower-type-bounds","children":[]},{"level":2,"title":"Abstract type members","slug":"abstract-type-members","link":"#abstract-type-members","children":[{"level":3,"title":"Abstract type members vs Generics","slug":"abstract-type-members-vs-generics","link":"#abstract-type-members-vs-generics","children":[]}]},{"level":2,"title":"Opaque types","slug":"opaque-types","link":"#opaque-types","children":[]},{"level":2,"title":"Union types","slug":"union-types","link":"#union-types","children":[]},{"level":2,"title":"Intersection types","slug":"intersection-types","link":"#intersection-types","children":[]}],"relativePath":"scala/advanced/types.md"}'),p={name:"scala/advanced/types.md"},e=l(`<h1 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-hidden="true">#</a></h1><p>Scala&#39;s type system is very powerful and allow for zero cost abstraction.</p><h2 id="type-alias" tabindex="-1">Type alias <a class="header-anchor" href="#type-alias" aria-hidden="true">#</a></h2><p>Scala uses the keyword <code>type</code> to work with types. In particular you can use this to create custom types and type alias:</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Cow</span><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;font-style:italic;">// creates a type &quot;Cow&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CowHerd</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">Cow</span><span style="color:#A6ACCD;">]    </span><span style="color:#676E95;font-style:italic;">// creates a type &quot;CowHerd&quot; which is an alias for a List of Cow</span></span>
<span class="line"></span></code></pre></div><h3 id="function-type-aliases" tabindex="-1">Function type aliases <a class="header-anchor" href="#function-type-aliases" aria-hidden="true">#</a></h3><p>Scala uses the type <code>=&gt;[A, B]</code> (can be written <code>A =&gt; B</code>) for a function that take an <code>A</code> and returns a <code>B</code>. You can also create type aliases for function types.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IntToString</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span></span>
<span class="line"></span></code></pre></div><h2 id="upper-type-bounds" tabindex="-1">Upper type bounds <a class="header-anchor" href="#upper-type-bounds" aria-hidden="true">#</a></h2><p>Scala uses the syntax <code>&lt;:</code> to specify upper bound relation between types.</p><p><em>NB: type <code>Herd[_]</code> is known as a <strong>higher-kinded type</strong>.</em></p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Animal</span><span style="color:#A6ACCD;">                         </span><span style="color:#676E95;font-style:italic;">// simple type</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Cow</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Animal</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">// type Cow is a subtype of type Animal</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Herd</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Animal</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">]    </span><span style="color:#676E95;font-style:italic;">// type Herd[A] takes a type A that must be a subtype of Animal and is an alias for a List of A</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CowHerd</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Herd</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">Cow</span><span style="color:#A6ACCD;">]            </span><span style="color:#676E95;font-style:italic;">// type CowHerd is a Herd of Cow</span></span>
<span class="line"></span></code></pre></div><h2 id="lower-type-bounds" tabindex="-1">Lower type bounds <a class="header-anchor" href="#lower-type-bounds" aria-hidden="true">#</a></h2><p>Scala uses the syntax <code>&gt;:</code> to specify lower bound relation between types.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">trait</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">+</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">prepend</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">](</span><span style="color:#A6ACCD;font-style:italic;">elem</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NonEmptyList</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NonEmptyList</span><span style="color:#A6ACCD;">(elem, this)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NonEmptyList</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">+</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">](</span><span style="color:#A6ACCD;font-style:italic;">head</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">, </span><span style="color:#A6ACCD;font-style:italic;">tail</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">]) </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">Nothing</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre></div><p>Check the full example <a href="https://docs.scala-lang.org/tour/lower-type-bounds.html" target="_blank" rel="noreferrer">here</a>.</p><h2 id="abstract-type-members" tabindex="-1">Abstract type members <a class="header-anchor" href="#abstract-type-members" aria-hidden="true">#</a></h2><p>A type member can be declared in an object, class, or trait to be used within the scope.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Food</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Meat</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Food</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Grass</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Food</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">trait</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Animal</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SuitableFood</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Food</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">eat</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">some</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">SuitableFood</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">???</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lion</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Animal</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SuitableFood</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Meat</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Cow</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Animal</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SuitableFood</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Grass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> lion </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lion</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> cow </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Cow</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> meat</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Meat</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">???</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> grass</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Grass</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">???</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">lion.eat(meat)          </span><span style="color:#676E95;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#A6ACCD;">cow.eat(grass)          </span><span style="color:#676E95;font-style:italic;">// OK</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// lion.eat(grass)      // doesn&#39;t compile</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//          ^^^^^ required lion.SuitableFood</span></span>
<span class="line"></span></code></pre></div><h3 id="abstract-type-members-vs-generics" tabindex="-1">Abstract type members vs Generics <a class="header-anchor" href="#abstract-type-members-vs-generics" aria-hidden="true">#</a></h3><p>Pretty much everything achievable through abstract type members is achievable through generics (and vice-versa) so why bother with both ?</p><p>Here are good ressources:</p><ul><li><a href="https://stackoverflow.com/questions/1154571/scala-abstract-types-vs-generics" target="_blank" rel="noreferrer">Ressource 1</a></li><li><a href="https://www.artima.com/articles/the-purpose-of-scalas-type-system" target="_blank" rel="noreferrer">Ressource 2</a></li><li><a href="https://www.artima.com/weblogs/viewpost.jsp?thread=270195" target="_blank" rel="noreferrer">Ressource 3</a></li></ul><h2 id="opaque-types" tabindex="-1">Opaque types <a class="header-anchor" href="#opaque-types" aria-hidden="true">#</a></h2><p>Consider the following situation.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserID</span><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Long</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VehicleID</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Long</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findVehicle</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">vehicleID</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">VehicleID</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">???</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> userID</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserID</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">???</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">findVehicle(userID)         </span><span style="color:#676E95;font-style:italic;">// OK but WRONG (using a UserID instead of VehicleID)</span></span>
<span class="line"></span></code></pre></div><p>This example compiles fine because the types <code>UserID</code> and <code>VehicleID</code> are just aliases for <code>Long</code> which means we can uses one in place of the other (correct but unwanted behavious).</p><p>Scala uses the keyword <code>opaque</code> as a type qualifier.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Users</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">opaque</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserID</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Long</span></span>
<span class="line"><span style="color:#89DDFF;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Vehicles</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">opaque</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VehicleID</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Long</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Users</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">UserID</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Vehicles</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">VehicleID</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findUser</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">userID</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">UserID</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">???</span></span>
<span class="line"><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findVehicle</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">vehicleID</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">VehicleID</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">???</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> userID</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserID</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">???</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// findVehicle(userID)          // doesn&#39;t compile</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//             ^^^^^^ required VehicleID</span></span>
<span class="line"></span></code></pre></div><h2 id="union-types" tabindex="-1">Union types <a class="header-anchor" href="#union-types" aria-hidden="true">#</a></h2><p>Scala has a built-in union type <code>|[A, B]</code> (can be written <code>A | B</code>) that expresses that a value can be either of type <code>A</code> or <code>B</code>.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> IntOrString</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">then</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">one</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><h2 id="intersection-types" tabindex="-1">Intersection types <a class="header-anchor" href="#intersection-types" aria-hidden="true">#</a></h2><p>Scala has a built-in intersection type <code>&amp;[A, B]</code> (can be written <code>A &amp; B</code>) that expresses that a value is both of type <code>A</code> and <code>B</code>.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">trait</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Resettable</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reset</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Unit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">trait</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Growable</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Unit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">f</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Resettable</span><span style="color:#A6ACCD;"> &amp; </span><span style="color:#FFCB6B;">Growable</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Unit</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">  x.reset()</span></span>
<span class="line"><span style="color:#A6ACCD;">  x.add(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">first</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div>`,35),o=[e];function t(c,r,y,C,i,A){return a(),n("div",null,o)}const d=s(p,[["render",t]]);export{F as __pageData,d as default};
