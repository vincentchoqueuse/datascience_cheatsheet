import{_ as s,o as a,c as n,a as l}from"./app.0972b3d3.js";const F=JSON.parse('{"title":"Containers","description":"","frontmatter":{},"headers":[{"level":2,"title":"List and Seq","slug":"list-and-seq","link":"#list-and-seq","children":[]},{"level":2,"title":"Map","slug":"map","link":"#map","children":[]},{"level":2,"title":"Option","slug":"option","link":"#option","children":[]},{"level":2,"title":"Container methods","slug":"container-methods","link":"#container-methods","children":[{"level":3,"title":"map method","slug":"map-method","link":"#map-method","children":[]},{"level":3,"title":"flatMap method","slug":"flatmap-method","link":"#flatmap-method","children":[]},{"level":3,"title":"filter method","slug":"filter-method","link":"#filter-method","children":[]}]}],"relativePath":"scala/containers.md"}'),o={name:"scala/containers.md"},e=l(`<h1 id="containers" tabindex="-1">Containers <a class="header-anchor" href="#containers" aria-hidden="true">#</a></h1><p>Scala offers a large variety of containers for your data: collections (<code>List</code>, <code>Seq</code>, <code>Set</code>, <code>Map</code>...), <code>Option</code>, <code>Either</code>, <code>Future</code>... Most of these containers have a monadic behaviour. We&#39;ll go over the main containers as well as the main methods you can use.</p><h2 id="list-and-seq" tabindex="-1"><code>List</code> and <code>Seq</code> <a class="header-anchor" href="#list-and-seq" aria-hidden="true">#</a></h2><p>Scala uses <code>List</code> and <code>Seq</code> to create vectors of data. They both work very similarly (in fact <code>List</code>&#39;s parent class <code>LinearSeq</code> inherits <code>Seq</code>).</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> xs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)       </span><span style="color:#676E95;font-style:italic;">// a List of Int</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> ys </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Seq</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)             </span><span style="color:#676E95;font-style:italic;">// a Seq of String, type is deduced</span></span>
<span class="line"></span></code></pre></div><h2 id="map" tabindex="-1"><code>Map</code> <a class="header-anchor" href="#map" aria-hidden="true">#</a></h2><p>Scala uses <code>Map</code> to create maps (also knows as hashmaps, dictionnary...).</p><p><em>NB: the <code>-&gt;</code> notation can be used for tuples</em></p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// a map of String and Int</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> xm</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Map</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Map</span><span style="color:#A6ACCD;">((</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">one</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">), (</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">two</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">), (</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">three</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// a map of Int and Boolean, types are deduced</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> ym </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Map</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">             </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">             </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="option" tabindex="-1"><code>Option</code> <a class="header-anchor" href="#option" aria-hidden="true">#</a></h2><p>Scala uses <code>Option</code> to indicate that a data can be present or not. An value of type <code>Option[Int]</code> could contains an <code>Int</code> or not. This is very useful for methods that can &quot;fail&quot; (like finding an element in a <code>List</code>).</p><p>Scala uses <code>Some()</code> and <code>None</code> to work with <code>Option</code></p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Option</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Some</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)        </span><span style="color:#676E95;font-style:italic;">// data is present (1)</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">None</span><span style="color:#A6ACCD;">                        </span><span style="color:#676E95;font-style:italic;">// no data, type is inferred</span></span>
<span class="line"></span></code></pre></div><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> xs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> maybeOne </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> xs.find(i </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)        </span><span style="color:#676E95;font-style:italic;">// Some(1) (element found)</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> maybeFour </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> xs.find(i </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)       </span><span style="color:#676E95;font-style:italic;">// None (element not found)</span></span>
<span class="line"></span></code></pre></div><h2 id="container-methods" tabindex="-1">Container methods <a class="header-anchor" href="#container-methods" aria-hidden="true">#</a></h2><p>Most containers share the same methods such as <code>map</code>, <code>flatMap</code>, <code>filter</code>... If you are having trouble finding and understanding all of these methods (some can be quite complex), you can use this <a href="https://superruzafa.github.io/visual-scala-reference//" target="_blank" rel="noreferrer">Visual Reference</a>.</p><h3 id="map-method" tabindex="-1"><code>map</code> method <a class="header-anchor" href="#map-method" aria-hidden="true">#</a></h3><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">trait</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Collection</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;">](</span><span style="color:#A6ACCD;font-style:italic;">f</span><span style="color:#A6ACCD;">: (</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Collection</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre></div><p><code>map</code> creates a collection using as elements the results obtained from applying the function <code>f</code> to each element of this collection.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> xs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)                  </span><span style="color:#676E95;font-style:italic;">// List(1, 2, 3)</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> twicexs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> xs.map(x </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)        </span><span style="color:#676E95;font-style:italic;">// List(2, 4, 6)</span></span>
<span class="line"></span></code></pre></div><h3 id="flatmap-method" tabindex="-1"><code>flatMap</code> method <a class="header-anchor" href="#flatmap-method" aria-hidden="true">#</a></h3><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">trait</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Collection</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">flatMap</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">f</span><span style="color:#A6ACCD;">: (</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Collection</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Collection</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre></div><p><code>flatMap</code> creates a collection by applying the function <code>f</code> to each element and using the resulting subelements as elements of the new collection.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> xs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)                      </span><span style="color:#676E95;font-style:italic;">// List(1, 2, 3)</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> ys </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> xs.flatMap(x </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">(x, x </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">))    </span><span style="color:#676E95;font-style:italic;">// List(1, 2, 2, 4, 3, 6)</span></span>
<span class="line"></span></code></pre></div><h3 id="filter-method" tabindex="-1"><code>filter</code> method <a class="header-anchor" href="#filter-method" aria-hidden="true">#</a></h3><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">trait</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Collection</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">p</span><span style="color:#A6ACCD;">: (</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Boolean</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Collection</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre></div><p><code>filter</code> creates a collection with those elements that satisfy the predicate <code>p</code> and discarding the rest.</p><div class="language-scala"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> xs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)                      </span><span style="color:#676E95;font-style:italic;">// List(1, 2, 3)</span></span>
<span class="line"><span style="color:#89DDFF;">val</span><span style="color:#A6ACCD;"> ys </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> xs.filter(x </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)         </span><span style="color:#676E95;font-style:italic;">// List(2)</span></span>
<span class="line"></span></code></pre></div>`,28),p=[e];function t(c,r,C,y,i,A){return a(),n("div",null,p)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
